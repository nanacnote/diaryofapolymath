#!/bin/sh

set -e                                    # exit execution if a command fails
set -a                                    # set marking all created and all modified variables for export
[ ! -f ./.env ] || . ./.env               # load environment variables
set +a                                    # unset marking variables for export

show_help() {
  cat <<-EOF
    Usage:
      $0 [OPTIONS] <COMMANDS> [ARGS]

    Commands:
      start:dev                 Start both Django and Vite servers.
      start:django:debugger     Start the Django server in pdb (debugger) mode.
      start:lint                Scan the codebase and report any linting issues.
      start:lint:fix            Scan the codebase and automatically fix any linting issues.
      start:test                Run tests using pytest. Additional arguments can be passed.
      start:release             In CI, tag the main branch with a release version number and include a change log.
      start:prod                Starts the Supervisor daemon. Used in production.
EOF
exit 1 # Exit script after printing help
}

kill_all_processes() {
  echo "**Attempting a graceful shutdown**"
  kill -15 "$PID_1" &&
  echo "**Successfully terminated Django process [$PID_1]**"
  kill -15 "$PID_2" &&
  echo "**Successfully terminated Vite process [$PID_2]**"
  rm -rf local.dev.log &&
  echo "**Successfully deleted log file at [./local.dev.log]**"
  exit 0
}

check_pipenv_env() {
  if command -v pipenv >/dev/null 2>&1 ; then
    echo "Pipenv is installed!"
    if [ -z "$(pipenv --venv)" ]; then
        echo >&2 "Pipenv is not running in a Pipenv environment. Starting a new Pipenv shell..."
        pipenv shell
    else
        echo >&2 "Pipenv is running in a Pipenv environment located at $(pipenv --venv)"
    fi
  else
    echo "Pipenv is not installed. Please install Pipenv and try again."
    exit 1
  fi
}

check_node_version() {
  node_version=$(node -v | cut -c 2-)
  if [ "$(printf '%s\n' "16" "$node_version" | sort -V | head -n1)" = "16" ]; then
    echo >&2 "Node.js version 16 or above is installed. Continuing..."
  else
    echo >&2 "Node.js version 16 or above is required. Exiting..."
    exit 1
  fi
}

check_python_version() {
  python_version=$(python3 -c 'import platform; print(platform.python_version())')
  if [ "$(printf '%s\n' "3.9" "$python_version" | sort -V | head -n1)" = "3.9" ]; then
    echo "Python version 3.9 or above is installed. Continuing..."
  else
    echo "Python version 3.9 or above is required. Exiting..."
    exit 1
  fi
}

setup_goatcounter_db() {
  goatcounter db create site \
    -vhost $GOATCOUNTER_DOMAIN_NAME \
    -user.email $GOATCOUNTER_EMAIL \
    -user.password $GOATCOUNTER_PASSWORD \
    -db $GOATCOUNTER_DATABASE_URI \
    -createdb || true
}

setup_django_db() {
  django-admin migrate --no-input
}

start_django_dev_server() {
  django-admin runserver 2>&1 >>local.dev.log &
  PID_1=$!
}

start_vite_dev_server() {
  npm start --color=always 2>&1 >>local.dev.log &
  PID_2=$!
}

if [ "$1" = "start:dev" ]; then
  trap kill_all_processes INT TERM QUIT
  setup_django_db
  check_pipenv_env
  check_python_version
  check_node_version
  start_django_dev_server
  start_vite_dev_server
  tail -f local.dev.log
elif [ "$1" = "start:django:debugger" ]; then
  python -m pdb ./src/manage.py runserver
elif [ "$1" = "start:lint" ]; then
  flake8 ./src
elif [ "$1" = "start:lint:fix" ]; then
  isort ./src \
    && black ./src \
    && flake8 ./src
elif [ "$1" = "start:test" ]; then
  shift
  pytest "$@"
elif [ "$1" = "start:release" ]; then
  shift
  npx semantic-release "$@"
elif [ "$1" = "start:prod" ]; then
  setup_goatcounter_db
  setup_django_db
  supervisord
else
  show_help
fi
